<!-- 本示例未包含完整css，获取外链css请参考上文，在hello uni-app项目中查看 -->
<template>
	<view>

		<view style="margin-top: 100px;"></view>

		<view class="uni-padding-wrap" style="border: 1px solid red; background-color: lightblue;">
			<view class="uni-title">
				<text>日期：{{year}}年{{month}}月{{day}}日</text>
			</view>
		</view>




		<picker-view v-if="visible" class="picker-view" style="border: 1px solid red; background-color: lightblue;"
			:indicator-style="indicatorStyle" :value="value" @change="bindChange" :mask-top-style="maskTopStyle"
			:mask-bottom-style="maskBottomStyle">

			<picker-view-column class="picker-view-column">
				<view class="item" v-for="(item,index) in years" :key="index">
					<text class="text">{{item}}年</text>
				</view>
			</picker-view-column>
			<picker-view-column class="picker-view-column">
				<view class="item" v-for="(item,index) in months" :key="index">
					<text class="text">{{item}}月</text>
				</view>
			</picker-view-column>
			<picker-view-column class="picker-view-column">
				<view class="item" v-for="(item,index) in days" :key="index">
					<text class="text">{{item}}日</text>
				</view>
			</picker-view-column>
		</picker-view>

		<button @click="ontoggle">toggle</button>
		<button @click="setScrollViewValue">set val</button>
		<button type='primary' @click="goScrollVal">scroll </button>

		<view>
			<scroll-view @scroll='scroll' @scrollend="scrollend" ref="sv2"
				style="height: 100px; border: 1px solid lightcoral;background-color: lightblue;">
				<view style="height:20px;" v-for="item in 10" :key='item'>
					<text style="color: red;border: 1px solid red;">{{item}}</text>
				</view>
			</scroll-view>
		</view>

	</view>
</template>
<script>
	export default {
		data() {
			const date = new Date()
			const _years : number[] = []
			const _year = date.getFullYear()
			const _months : number[] = []
			const _month : number = date.getMonth() + 1
			const _days : number[] = []
			const _day = date.getDate()
			for (let i = 2000; i <= _year; i++) {
				_years.push(i)
			}
			for (let i = 1; i <= 12; i++) {
				_months.push(i)
			}
			for (let i = 1; i <= 31; i++) {
				_days.push(i)
			}
			return {
				title: 'picker-view',
				years: _years as number[],
				year: _year as number,
				months: _months as number[],
				month: _month as number,
				days: _days as number[],
				day: _day as number,
				value: [_year - 2000, _month - 1, _day - 1] as number[],
				result: [] as number[],
				indicatorStyle: 'height: 50px;',
				maskTopStyle: '',
				maskBottomStyle: '',
				visible: true,

			}
		},
		methods: {
			setScrollViewValue() {
				const _year = Math.floor(Math.random() * 20)  + 1
				const _month = Math.floor(Math.random() * 12)
				const _day = Math.floor(Math.random() * 31) + 1
				this.value = [_year, _month, _day]
			},
			goScrollVal() {
				// const val = Math.floor(Math.random() * 100)
				// console.log('scroll', val, this.$refs.sv2)
				// this.$refs.sv2.setAnyAttribute(
				// 	'scroll-top',
				// 	val
				// )
			},
			ontoggle() {
				this.visible = !this.visible
			},
			refresherpulling() {
				console.log('refresherpulling')
			},
			refresherrefresh() {
				console.log('refresherrefresh')
			},
			refresherrestore() {
				console.log('refresherrestore')
			},
			refresherabort() {
				console.log('refresherabort')
			},
			scroll() {
				console.log('scroll')
			},
			scrolltoupper() {
				console.log('scrolltoupper')
			},
			scrolltolower() {
				console.log('scrolltolower')
			},
			startnestedscroll() {
				console.log('startnestedscroll')
			},
			nestedprescroll() {
				console.log('nestedprescroll')
			},
			stopnestedscroll() {
				console.log('stopnestedscroll')
			},
			scrollend(e : UniScrollEvent) {
				console.log('scrollend', e)
			},
			bindChange(e : UniPickerViewChangeEvent) {
				const val = e.detail.value
				this.result = val
				this.year = this.years[val[0]]
				this.month = this.months[val[1]]
				this.day = this.days[val[2]]
			},
			setValue() {
				this.value = [0, 0, 0] as number[]
			},
			setValue1() {
				this.value = [10, 10, 10] as number[]
			},

		}
	}
</script>
<style>
	.picker-view {
		width: 100%;
		height: 320px;
		margin-top: 10px;
	}

	.item {
		height: 50px;
	}

	.text {
		line-height: 50px;
		text-align: center;
	}
</style>