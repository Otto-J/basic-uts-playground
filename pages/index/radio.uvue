<template>
	<view>


		<radio-group name='name2' @change='onChange'>
			<radio value='big'>
				<text>大</text>
			</radio>
			<radio value='big'>
				<text>故意写重复了大</text>
			</radio>
			<radio value='small'>
				<text>小</text>
			</radio>
			<radio value='middle' :disabled="true">
				<text>中</text>
			</radio>
			<radio value='myRadioValue' :disabled="disabled_boolean" :checked="checked_boolean" :color="color_input"
				:backgroundColor="backgroundColor_input" :borderColor="borderColor_input"
				:activeBackgroundColor="activeBackgroundColor_input" :activeBorderColor="activeBorderColor_input"
				:iconColor="iconColor_input" @click="radio_click" @touchstart="radio_touchstart" @touchmove="radio_touchmove"
				@touchcancel="radio_touchcancel" @touchend="radio_touchend" @tap="radio_tap" @longpress="radio_longpress">
				<text>自定义</text>
			</radio>
		</radio-group>
		<text>checkbox</text>
		<checkbox></checkbox>
		<text>check group</text>

		<checkbox-group @change="checkgroupChange">
			<checkbox value="super" :checked="checked" color="red">超大
			</checkbox>
			<checkbox value="big">大</checkbox>
			<checkbox value="middle" :disabled="true">禁用</checkbox>
			<checkbox value="small">
				小
			</checkbox>
		</checkbox-group>
		<text>普通 normalChecked {{normalChecked}}</text>
		<radio v-model='normalChecked'>
			<text>选中</text>
		</radio>
		<text>--checkd 静态属性--</text>

		<radio :checked='true'>
			<text>default true</text>
		</radio>
		<radio :checked='false'>
			<text>default false</text>
		</radio>
	</view>
</template>

<script>
	type ItemType = {
		value : string
		name : string
	}
	export default {
		data() {
			return {
				normalChecked: false,
				current: 0,
				count: 0,

				value: '',
				text: '未选中',
				wrapText: 'uni-app x，终极跨平台方案\nuts，大一统语言',
				disabled: true,
				checked: true,
				color: '#007aff',
				// 组件属性 autotest
				checked_boolean: false,
				disabled_boolean: false,
				color_input: "#007AFF",
				backgroundColor_input: "#ffffff",
				borderColor_input: "#d1d1d1",
				activeBackgroundColor_input: "#007AFF",
				activeBorderColor_input: "",
				iconColor_input: "#ffffff"
			}
		},
		computed: {
			getStyle2() {
				return {
					background: this.count % 2 === 0 ? 'lightblue' : 'lightgreen',
					border: this.count % 2 === 0 ? '1px solid blue' : '1px solid green'
				}
				// return 'height:100px;background:red'
			}
		},
		methods: {
			onChange(e : UniRadioGroupChangeEvent) {
				console.log(22, e)
			},
			incrementCount() {
				this.count++;
			},

			checkgroupChange(e : UniCheckboxGroupChangeEvent) {
				console.log(44, e)
			},
			radioChange(e : UniRadioGroupChangeEvent) {
				console.log(66, e)
			},
			testChange(e : UniRadioGroupChangeEvent) {
				this.value = e.detail.value
			},
			radio_click() { console.log("组件被点击时触发") },
			radio_touchstart() { console.log("手指触摸动作开始") },
			radio_touchmove() { console.log("手指触摸后移动") },
			radio_touchcancel() { console.log("手指触摸动作被打断，如来电提醒，弹窗") },
			radio_touchend() { console.log("手指触摸动作结束") },
			radio_tap() { console.log("手指触摸后马上离开") },
			radio_longpress() { console.log("如果一个组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。") },
			change_checked_boolean(checked : boolean) { this.checked_boolean = checked },
			change_disabled_boolean(checked : boolean) { this.disabled_boolean = checked },
			confirm_color_input(value : string) { this.color_input = value },
			confirm_backgroundColor_input(value : string) { this.backgroundColor_input = value },
			confirm_borderColor_input(value : string) { this.borderColor_input = value },
			confirm_activeBackgroundColor_input(value : string) { this.activeBackgroundColor_input = value },
			confirm_activeBorderColor_input(value : string) { this.activeBorderColor_input = value },
			confirm_iconColor_input(value : string) { this.iconColor_input = value }
		}
	}
</script>

<style>

</style>